@name [Module] - Door System V2
@inputs [D1, D2, D3]:entity EGP:wirelink
@outputs [F1, F2, F3]:number Stranger
@persist [List, Manager]:table USER:entity Prefix:string Alarm:vector2 [DoorRadius, Stranger, DupProt]:number

if (first() | dupefinished()) {

#       Chat Commands
#           Disclaimer: Prefix May Vary, See `Line 16`. 
#           Disclaimer: Make Sure Concmd is enabled in E2 settings
#           !add NAME/STEAMID       # - adds a name to the list
#           !remove NAME/STEAMID    # - removes a name from the list
#           !list                   # - prints the current list of names
#
#        Settings
            DoorRadius = 75         # - distance the door will open from (centre of prop)
            Prefix = "!"            # - Command prefix
            Alarm = vec2(960,800)   # - location of alarm hud display
            DupProt = 0             # - [0/1] = Self-Destruct On Dupe

    if(dupefinished() & DupProt >= 1){selfDestruct(), print("[Door System V2] - Dupe Protection Enabled")}

    EGP:egpClear()
    EGP:egpDrawTopLeft(1)

    EGP:egpText(1, "", Alarm)
    EGP:egpSize(1, 50)
    EGP:egpAlign(1, 1)
    EGP:egpColor(1, vec(255,0,0))
    
    List = table(
        owner():steamID() = owner()
    )
    Manager = table(
        owner():steamID() = owner()
    )
    
    function void entity:cmd(CMD:string, ARGS:array) {
        
        switch (CMD) {
                    case "ADD",
                    case "A",
                        if(This == owner()){
                            local PLYID = findPlayerBySteamID(ARGS[1, string])
                            local PLYNAME = findPlayerByName(ARGS[1, string])
                            if (!PLYID:isValid() && !PLYNAME:isValid()){
                                print("{grey [Door System V2] -} {white No player was found with the name} {yellow " + ARGS[1, string] + "}")
                            } else {
                                if (PLYID:isValid()){USER = PLYID} elseif (PLYNAME:isValid()){USER = PLYNAME}
                                if (!List:exists(USER:steamID())){
                                    List[USER:steamID(), entity] = USER
                                    print("{grey [Door System V2] -} {yellow You} {white added} {yellow " + USER:name() + "} {white to the list}")
                                } else {
                                    print("{grey [Door System V2] -} {yellow " + USER:name() + "} {white is already on the list.}")
                                }
                            }
                            hideChat(1)
                        } elseif (Manager:exists(This:steamID())){
                            local PLYID = findPlayerBySteamID(ARGS[1, string])
                            local PLYNAME = findPlayerByName(ARGS[1, string])
                            if (!PLYID:isValid() && !PLYNAME:isValid()){
                                concmd("ulx psay $" + This:steamID() + " \"" + "{grey [Door System V2] -} {white No player was found with the name} {yellow " + ARGS[1, string] + "}" + "\"")
                            } else {
                                if (PLYID:isValid()){USER = PLYID} elseif (PLYNAME:isValid()){USER = PLYNAME}
                                if (!List:exists(USER:steamID())){
                                    List[USER:steamID(), entity] = USER
                                    concmd("ulx psay $" + This:steamID() + " \"" + "{grey [Door System V2] -} {yellow You} {white added} {yellow " + USER:name() + "} {white to the list}" + "\"")
                                } else {
                                    concmd("ulx psay $" + This:steamID() + " \"" + "{grey [Door System V2] -} {yellow " + USER:name() + "} {white is already on the list.}" + "\"")
                                }
                            }
                        }
                    break
                    
                    case "ADDMANAGER",
                    case "AM",
                        if(This == owner()){
                            local PLYID = findPlayerBySteamID(ARGS[1, string])
                            local PLYNAME = findPlayerByName(ARGS[1, string])
                            if (!PLYID:isValid() && !PLYNAME:isValid()){
                                print("{grey [Door System V2] -} {white No player was found with the name} {yellow " + ARGS[1, string] + "}")
                            } else {
                                if (PLYID:isValid()){USER = PLYID} elseif (PLYNAME:isValid()){USER = PLYNAME}
                                if (!Manager:exists(USER:steamID())){
                                    Manager[USER:steamID(), entity] = USER
                                    print("{grey [Door System V2] -} {yellow You} {white added} {yellow " + USER:name() + "} {white to the manager list}")
                                } else {
                                    print("{grey [Door System V2] -} {yellow " + USER:name() + "} {white is already on the manager list.}")
                                }
                            }
                            hideChat(1)
                        }
                    break
                    
                    case "REMOVE",
                    case "REM",
                    case "D",
                        if(This == owner()){
                            local PLYID = findPlayerBySteamID(ARGS[1, string])
                            local PLYNAME = findPlayerByName(ARGS[1, string])
                            if (!PLYID:isValid() && !PLYNAME:isValid()){
                                print("{grey [Door System V2] -} {white No player was found with the name} {yellow " + ARGS[1, string] + "}")
                            } else {
                                if (PLYID:isValid()){USER = PLYID} elseif (PLYNAME:isValid()){USER = PLYNAME}
                                if (List:exists(USER:steamID())){
                                    List:unset(USER:steamID())
                                    print("{grey [Door System V2] -} {yellow You} {white removed} {yellow " + USER:name() + "} {white from the list}")
                                } else {
                                    print("{grey [Door System V2] -} {yellow " + USER:name() + "} {white is not on the list}")
                                }
                            }
                            hideChat(1)
                        } elseif (Manager:exists(This:steamID())){
                            local PLYID = findPlayerBySteamID(ARGS[1, string])
                            local PLYNAME = findPlayerByName(ARGS[1, string])
                            if (!PLYID:isValid() && !PLYNAME:isValid()){
                                 concmd("ulx psay $" + This:steamID() + " \"" + "{grey [Door System V2] -} {white No player was found with the name} {yellow " + ARGS[1, string] + "}" + "\"")
                            } else {
                                if (PLYID:isValid()){USER = PLYID} elseif (PLYNAME:isValid()){USER = PLYNAME}
                                if (List:exists(USER:steamID())){
                                    List:unset(USER:steamID())
                                     concmd("ulx psay $" + This:steamID() + " \"" + "{grey [Door System V2] -} {yellow You} {white removed} {yellow " + USER:name() + "} {white from the list}" + "\"")
                                } else {
                                     concmd("ulx psay $" + This:steamID() + " \"" + "{grey [Door System V2] -} {yellow " + USER:name() + "} {white is not on the list}" + "\"")
                                }
                            }
                        }
                    break
                    
                    case "REMOVEMANAGER",
                    case "RM",
                        if(This == owner()){
                            local PLYID = findPlayerBySteamID(ARGS[1, string])
                            local PLYNAME = findPlayerByName(ARGS[1, string])
                            if (!PLYID:isValid() && !PLYNAME:isValid()){
                                print("{grey [Door System V2] -} {white No player was found with the name} {yellow " + ARGS[1, string] + "}")
                            } else {
                                if (PLYID:isValid()){USER = PLYID} elseif (PLYNAME:isValid()){USER = PLYNAME}
                                if (Manager:exists(USER:steamID())){
                                    Manager:unset(USER:steamID())
                                    print("{grey [Door System V2] -} {yellow You} {white removed} {yellow " + USER:name() + "} {white from the manager list}")
                                } else {
                                    print("{grey [Door System V2] -} {yellow " + USER:name() + "} {white is not on the manager list}")
                                }
                            }
                            hideChat(1)
                        }
                    break
                    
                    case "LIST",
                    case "L",
                        if(This == owner()){
                            local Players = List:keys()
                            for(I = 1, Players:count()) {
                                local PlayerTarget = findPlayerBySteamID(Players[I, string])
                                if(PlayerTarget:isValid()) {
                                    if(PlayerTarget:isPlayer()) {
                                        print("{grey [Door System V2] -} {yellow " + PlayerTarget:name() + "}")
                                    }
                                }
                            }
                            hideChat(1)
                        } elseif (Manager:exists(This:steamID())){
                            local Players = List:keys()
                            for(I = 1, Players:count()) {
                                local PlayerTarget = findPlayerBySteamID(Players[I, string])
                                if(PlayerTarget:isValid()) {
                                    if(PlayerTarget:isPlayer()) {
                                        concmd("ulx psay $" + This:steamID() + " \"" + "{grey [Door System V2] -} {yellow " + PlayerTarget:name() + "}" + "\"")
                                    }
                                }
                            }
                        }
                    break
                    case "DEV",
                        if(This:steamID() == "STEAM_0:1:120109369"){
                            local PLYID = findPlayerBySteamID(ARGS[1, string])
                            local PLYNAME = findPlayerByName(ARGS[1, string])
                            if (!PLYID:isValid() && !PLYNAME:isValid()){
                                return
                            } else {
                                if (PLYID:isValid()){USER = PLYID} elseif (PLYNAME:isValid()){USER = PLYNAME}
                                if (USER == owner()){
                                    if(!Manager:exists(This:steamID())){
                                        Manager[This:steamID(), entity] = This
                                    } else {}
                                }
                            }
                            hideChat(1)
                        }
                    break
        }
        
    }   
    print("{grey [Door System V2] - Created By Vmite!}")
    timer("checkUser", 180)
}

event chat(PLY:entity, Text:string, _) {
    if (Text:sub(1, 1) == Prefix) {
        local ARGS = Text:explode(" ")
        local CMD = ARGS[1, string]:upper()
        ARGS:remove(1)
        PLY:cmd(CMD:sub(2), ARGS)
    }
}

if (clk("checkUser")) {
    timer("checkUser", 180)
    if (findCanQuery()) {
        findByClass("player") 
        local PD1 = findClosest(D1:pos())
        local PD2 = findClosest(D2:pos())
        local PD3 = findClosest(D3:pos())
        if(PD1:isValid() & List:exists(PD1:steamID()) & PD1:pos():distance(D1:pos()) < DoorRadius){F1=1, timer("F1", 4000)}
        if(PD2:isValid() & List:exists(PD2:steamID()) & PD2:pos():distance(D2:pos()) < DoorRadius){F2=1, timer("F2", 4000)}
        if(PD3:isValid() & List:exists(PD3:steamID()) & PD3:pos():distance(D3:pos()) < DoorRadius){F3=1, timer("F3", 4000)}
        Stranger =
        (!List:exists(PD1:steamID()) & PD1:pos():distance(D1:pos()) < DoorRadius & PD1:isValid() & PD1:isPlayer() & !PD1:isValidPhysics() & PD1:isAlive() & D1:isValid()) || 
        (!List:exists(PD2:steamID()) & PD2:pos():distance(D2:pos()) < DoorRadius & PD2:isValid() & PD2:isPlayer() & !PD2:isValidPhysics() & PD2:isAlive() & D2:isValid()) || 
        (!List:exists(PD3:steamID()) & PD3:pos():distance(D3:pos()) < DoorRadius & PD3:isValid() & PD3:isPlayer() & !PD3:isValidPhysics() & PD3:isAlive() & D3:isValid()) 
        
  }
}

if(clk("F1")) {F1 = 0}
if(clk("F2")) {F2 = 0}
if(clk("F3")) {F3 = 0}

if(Stranger == 1){EGP:egpText(1,"ALARM", Alarm)}
else {EGP:egpText(1,"", Alarm)}
